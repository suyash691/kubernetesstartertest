name: Build and Deploy node Express app to container
on:
  push:
    branches:
      - master

env:
  appname: "kubernetesdevopsstartertest"
  RESOURCEGROUPNAME: "devopsstarter-kubestest-rg"
  LOCATION: "South Central US"
  registrySku: "Basic"
  registryName: "testregistryformycontainerwithdevops"
  registryLocation: "South Central US"
  clusterName: "kubernetesdevopsstartertest"
  appInsightsLocation: "South Central US"
  clusterLocation: "South Central US"
  agentCount: 3
  agentVMSize: "Standard_DS2_v2"
  kubernetesVersion: 1.15.11
  omsLocation: "South Central US"
  omsWorkspaceName: "kubernetesdevopsstartertest"
  httpApplicationRoutingEnabled: false

jobs:
  build:
    name: Build and push to container registry
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    # login to azure
    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Get AKS Credentials
      id: getContext
      run: |
          az aks get-credentials --resource-group ${{ env.RESOURCEGROUPNAME }} --name ${{ env.clusterName }} --file $GITHUB_WORKSPACE/kubeconfig
          echo "::set-env name=KUBECONFIG::$GITHUB_WORKSPACE/kubeconfig"
    - name: Create namespace
      run: |
        namespacePresent=`kubectl get namespace | grep ${{ env.clusterName }} | wc -l`
        if [ $namespacePresent -eq 0 ]
        then
            echo `kubectl create namespace ${{ env.clusterName }}`
        fi
    - name: Get ACR credentials
      id: getACRCred
      run: |
           echo "::set-output name=acr_username::`az acr credential show -n ${{ env.registryName }} --query username`"
           echo "::set-output name=acr_password::`az acr credential show -n ${{ env.registryName }} --query passwords[0].value`"
    - uses: azure/k8s-create-secret@v1
      with:
        namespace: ${{ env.clusterName }}
        container-registry-url: ${{ env.registryName }}.azurecr.io
        container-registry-username: ${{ steps.getACRCred.outputs.acr_username }}
        container-registry-password: ${{ steps.getACRCred.outputs.acr_password }}
        secret-name: ${{ env.clusterName }}dockerauth
    - uses: azure/k8s-bake@v1
      with:
        renderEngine: 'helm'
        helmChart: './Application/charts/sampleapp' 
        overrideFiles: './aks-helloworld/values.yaml'
        overrides: |     
            image.repository: ${{ env.registryName }}.azurecr.io/${{ env.clusterName }}
            image.tag: ${{ github.sha }}
            imagepullsecrets:[${{ env.clusterName }}dockerauth]
        helm-version: 'latest' 
        silent: 'false'

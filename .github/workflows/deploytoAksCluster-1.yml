name: Build and Deploy node Express app to container
on:
  push:
    branches:
      - master

env:
  appname: "kubernetesdevopsstartertest"
  RESOURCEGROUPNAME: "devopsstarter-kubestest-rg"
  LOCATION: "South Central US"
  registrySku: "Basic"
  registryName: "testregistryformycontainerwithdevops"
  registryLocation: "South Central US"
  clusterName:"kubernetesdevopsstartertest"
  appInsightsLocation: "South Central US"
  clusterLocation: "South Central US"
  agentCount: 3
  agentVMSize: "Standard_DS2_v2"
  kubernetesVersion: 1.15.11
  omsLocation: "South Central US"
  omsWorkspaceName: "kubernetesdevopsstartertest"
  httpApplicationRoutingEnabled: false

jobs:
  build:
    name: Build and push to container registry
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    # login to azure
    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    # Deploy ARM template for container registry
    - name: Create container registry
      uses: azure/CLI@v1
      continue-on-error: false
      with:
        inlineScript: |
          az deployment group create --resource-group "${{ env.RESOURCEGROUPNAME }}" --template-file ./ArmTemplates/containerRegistry-template.json --parameters  registryName="${{ env.registryName }}" registryLocation="${{ env.registryLocation }}"  registrySku="${{ env.registrySku }}"
    - name: Set ACR username and password
      id: getACRCredentials
      uses: azure/CLI@v1
      continue-on-error: false
      with:
        inlineScript: |
          echo "::set-output name=acrusername::`az acr credential show -n ${{ env.registryName }} --query username`"
          echo "::add-mask::`az acr credential show -n ${{ env.registryName }} --query username`"
          echo "::set-output name=acrpassword::`az acr credential show -n ${{ env.registryName }} --query passwords[0].value`"
          echo "::add-mask::`az acr credential show -n ${{ env.registryName }} --query passwords[0].value`"
    - name: Login to ACR
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.registryName }}.azurecr.io
        username: ${{ steps.getACRCredentials.outputs.acrusername }}
        password: ${{ steps.getACRCredentials.outputs.acrpassword }}
    - name: Build and push image to ACR
      id: build-image
      run: |
        docker build "$GITHUB_WORKSPACE/Application" -f  "Application/Dockerfile" -t ${{ env.registryName }}.azurecr.io/${{ env.appname }}:${{ github.sha }}
        docker push ${{ env.registryName }}.azurecr.io/${{ env.appname }}:${{ github.sha }}
  deploy:
    name: Setup kube and deploy the app to kube
    runs-on: ubuntu-latest
    steps:
      - name: Create Kube
        uses: azure/CLI@v1
        continue-on-error: false
        with:
          inlineScript: |
             az deployment group create --resource-group "${{ env.RESOURCEGROUPNAME }}" --template-file ./ArmTemplates/aks-template.json --parameters    clusterName="${{ env.clusterName }}" appInsightsLocation="${{ env.appInsightsLocation }}" clusterLocation="${{ env.clusterLocation }}" agentCount="${{ env.agentCount }}" agentVMSize="${{ env.agentVMSize }}" kubernetesVersion="${{ env.kubernetesVersion }}" omsLocation="${{ env.omsLocation }}" omsWorkspaceName="${{ env.omsWorkspaceName }}" httpApplicationRoutingEnabled="${{ env.httpApplicationRoutingEnabled }}" 
